// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqls

import (
	"context"
	"database/sql"
)

const createHost = `-- name: CreateHost :one
INSERT INTO
    hosts (
        name,
        mac,
        ip,
        hostname,
        status,
        exposure,
        internetAccess,
        os,
        osVersion,
        ports,
        usage,
        location,
        owners,
        dependencies,
        createdAt,
        createdBy,
        recordedAt,
        access,
        connectsTo,
        hostType,
        exposedServices,
        cpuCores,
        ramGB,
        storageGB
    )
VALUES
    (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    ) RETURNING id, name, mac, ip, hostname, status, exposure, internetaccess, os, osversion, ports, usage, location, owners, dependencies, createdat, createdby, recordedat, access, connectsto, hosttype, exposedservices, cpucores, ramgb, storagegb
`

type CreateHostParams struct {
	Name            sql.NullString `json:"name"`
	Mac             sql.NullString `json:"mac"`
	Ip              sql.NullString `json:"ip"`
	Hostname        sql.NullString `json:"hostname"`
	Status          sql.NullInt64  `json:"status"`
	Exposure        sql.NullInt64  `json:"exposure"`
	Internetaccess  sql.NullInt64  `json:"internetaccess"`
	Os              sql.NullString `json:"os"`
	Osversion       sql.NullString `json:"osversion"`
	Ports           sql.NullString `json:"ports"`
	Usage           sql.NullString `json:"usage"`
	Location        sql.NullString `json:"location"`
	Owners          sql.NullString `json:"owners"`
	Dependencies    sql.NullString `json:"dependencies"`
	Createdat       sql.NullTime   `json:"createdat"`
	Createdby       sql.NullString `json:"createdby"`
	Recordedat      sql.NullTime   `json:"recordedat"`
	Access          sql.NullString `json:"access"`
	Connectsto      sql.NullString `json:"connectsto"`
	Hosttype        sql.NullString `json:"hosttype"`
	Exposedservices sql.NullString `json:"exposedservices"`
	Cpucores        sql.NullInt64  `json:"cpucores"`
	Ramgb           sql.NullInt64  `json:"ramgb"`
	Storagegb       sql.NullInt64  `json:"storagegb"`
}

func (q *Queries) CreateHost(ctx context.Context, arg CreateHostParams) (Host, error) {
	row := q.db.QueryRowContext(ctx, createHost,
		arg.Name,
		arg.Mac,
		arg.Ip,
		arg.Hostname,
		arg.Status,
		arg.Exposure,
		arg.Internetaccess,
		arg.Os,
		arg.Osversion,
		arg.Ports,
		arg.Usage,
		arg.Location,
		arg.Owners,
		arg.Dependencies,
		arg.Createdat,
		arg.Createdby,
		arg.Recordedat,
		arg.Access,
		arg.Connectsto,
		arg.Hosttype,
		arg.Exposedservices,
		arg.Cpucores,
		arg.Ramgb,
		arg.Storagegb,
	)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mac,
		&i.Ip,
		&i.Hostname,
		&i.Status,
		&i.Exposure,
		&i.Internetaccess,
		&i.Os,
		&i.Osversion,
		&i.Ports,
		&i.Usage,
		&i.Location,
		&i.Owners,
		&i.Dependencies,
		&i.Createdat,
		&i.Createdby,
		&i.Recordedat,
		&i.Access,
		&i.Connectsto,
		&i.Hosttype,
		&i.Exposedservices,
		&i.Cpucores,
		&i.Ramgb,
		&i.Storagegb,
	)
	return i, err
}

const deleteHost = `-- name: DeleteHost :one
DELETE FROM hosts
WHERE
    id = ? RETURNING id, name, mac, ip, hostname, status, exposure, internetaccess, os, osversion, ports, usage, location, owners, dependencies, createdat, createdby, recordedat, access, connectsto, hosttype, exposedservices, cpucores, ramgb, storagegb
`

func (q *Queries) DeleteHost(ctx context.Context, id interface{}) (Host, error) {
	row := q.db.QueryRowContext(ctx, deleteHost, id)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mac,
		&i.Ip,
		&i.Hostname,
		&i.Status,
		&i.Exposure,
		&i.Internetaccess,
		&i.Os,
		&i.Osversion,
		&i.Ports,
		&i.Usage,
		&i.Location,
		&i.Owners,
		&i.Dependencies,
		&i.Createdat,
		&i.Createdby,
		&i.Recordedat,
		&i.Access,
		&i.Connectsto,
		&i.Hosttype,
		&i.Exposedservices,
		&i.Cpucores,
		&i.Ramgb,
		&i.Storagegb,
	)
	return i, err
}

const getHost = `-- name: GetHost :one
SELECT
    id, name, mac, ip, hostname, status, exposure, internetaccess, os, osversion, ports, usage, location, owners, dependencies, createdat, createdby, recordedat, access, connectsto, hosttype, exposedservices, cpucores, ramgb, storagegb
FROM
    hosts
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetHost(ctx context.Context, id interface{}) (Host, error) {
	row := q.db.QueryRowContext(ctx, getHost, id)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mac,
		&i.Ip,
		&i.Hostname,
		&i.Status,
		&i.Exposure,
		&i.Internetaccess,
		&i.Os,
		&i.Osversion,
		&i.Ports,
		&i.Usage,
		&i.Location,
		&i.Owners,
		&i.Dependencies,
		&i.Createdat,
		&i.Createdby,
		&i.Recordedat,
		&i.Access,
		&i.Connectsto,
		&i.Hosttype,
		&i.Exposedservices,
		&i.Cpucores,
		&i.Ramgb,
		&i.Storagegb,
	)
	return i, err
}

const listHosts = `-- name: ListHosts :many
SELECT
    id, name, mac, ip, hostname, status, exposure, internetaccess, os, osversion, ports, usage, location, owners, dependencies, createdat, createdby, recordedat, access, connectsto, hosttype, exposedservices, cpucores, ramgb, storagegb
FROM
    hosts
LIMIT
    ?
OFFSET
    ?
`

type ListHostsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListHosts(ctx context.Context, arg ListHostsParams) ([]Host, error) {
	rows, err := q.db.QueryContext(ctx, listHosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Host
	for rows.Next() {
		var i Host
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Mac,
			&i.Ip,
			&i.Hostname,
			&i.Status,
			&i.Exposure,
			&i.Internetaccess,
			&i.Os,
			&i.Osversion,
			&i.Ports,
			&i.Usage,
			&i.Location,
			&i.Owners,
			&i.Dependencies,
			&i.Createdat,
			&i.Createdby,
			&i.Recordedat,
			&i.Access,
			&i.Connectsto,
			&i.Hosttype,
			&i.Exposedservices,
			&i.Cpucores,
			&i.Ramgb,
			&i.Storagegb,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHost = `-- name: UpdateHost :one
UPDATE hosts
SET
    name = ?,
    mac = ?,
    ip = ?,
    hostname = ?,
    status = ?,
    exposure = ?,
    internetAccess = ?,
    os = ?,
    osVersion = ?,
    ports = ?,
    usage = ?,
    location = ?,
    owners = ?,
    dependencies = ?,
    createdAt = ?,
    createdBy = ?,
    recordedAt = ?,
    access = ?,
    connectsTo = ?,
    hostType = ?,
    exposedServices = ?,
    cpuCores = ?,
    ramGB = ?,
    storageGB = ?
WHERE
    id = ? RETURNING id, name, mac, ip, hostname, status, exposure, internetaccess, os, osversion, ports, usage, location, owners, dependencies, createdat, createdby, recordedat, access, connectsto, hosttype, exposedservices, cpucores, ramgb, storagegb
`

type UpdateHostParams struct {
	Name            sql.NullString `json:"name"`
	Mac             sql.NullString `json:"mac"`
	Ip              sql.NullString `json:"ip"`
	Hostname        sql.NullString `json:"hostname"`
	Status          sql.NullInt64  `json:"status"`
	Exposure        sql.NullInt64  `json:"exposure"`
	Internetaccess  sql.NullInt64  `json:"internetaccess"`
	Os              sql.NullString `json:"os"`
	Osversion       sql.NullString `json:"osversion"`
	Ports           sql.NullString `json:"ports"`
	Usage           sql.NullString `json:"usage"`
	Location        sql.NullString `json:"location"`
	Owners          sql.NullString `json:"owners"`
	Dependencies    sql.NullString `json:"dependencies"`
	Createdat       sql.NullTime   `json:"createdat"`
	Createdby       sql.NullString `json:"createdby"`
	Recordedat      sql.NullTime   `json:"recordedat"`
	Access          sql.NullString `json:"access"`
	Connectsto      sql.NullString `json:"connectsto"`
	Hosttype        sql.NullString `json:"hosttype"`
	Exposedservices sql.NullString `json:"exposedservices"`
	Cpucores        sql.NullInt64  `json:"cpucores"`
	Ramgb           sql.NullInt64  `json:"ramgb"`
	Storagegb       sql.NullInt64  `json:"storagegb"`
	ID              interface{}    `json:"id"`
}

func (q *Queries) UpdateHost(ctx context.Context, arg UpdateHostParams) (Host, error) {
	row := q.db.QueryRowContext(ctx, updateHost,
		arg.Name,
		arg.Mac,
		arg.Ip,
		arg.Hostname,
		arg.Status,
		arg.Exposure,
		arg.Internetaccess,
		arg.Os,
		arg.Osversion,
		arg.Ports,
		arg.Usage,
		arg.Location,
		arg.Owners,
		arg.Dependencies,
		arg.Createdat,
		arg.Createdby,
		arg.Recordedat,
		arg.Access,
		arg.Connectsto,
		arg.Hosttype,
		arg.Exposedservices,
		arg.Cpucores,
		arg.Ramgb,
		arg.Storagegb,
		arg.ID,
	)
	var i Host
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mac,
		&i.Ip,
		&i.Hostname,
		&i.Status,
		&i.Exposure,
		&i.Internetaccess,
		&i.Os,
		&i.Osversion,
		&i.Ports,
		&i.Usage,
		&i.Location,
		&i.Owners,
		&i.Dependencies,
		&i.Createdat,
		&i.Createdby,
		&i.Recordedat,
		&i.Access,
		&i.Connectsto,
		&i.Hosttype,
		&i.Exposedservices,
		&i.Cpucores,
		&i.Ramgb,
		&i.Storagegb,
	)
	return i, err
}
